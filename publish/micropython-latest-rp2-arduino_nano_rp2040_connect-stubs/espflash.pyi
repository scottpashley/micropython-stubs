from _typeshed import Incomplete

_CMD_SYNC: Incomplete
_CMD_CHANGE_BAUDRATE: Incomplete
_CMD_ESP_READ_REG: Incomplete
_CMD_ESP_WRITE_REG: Incomplete
_CMD_SPI_ATTACH: Incomplete
_CMD_SPI_FLASH_MD5: Incomplete
_CMD_SPI_FLASH_PARAMS: Incomplete
_CMD_SPI_FLASH_BEGIN: Incomplete
_CMD_SPI_FLASH_DATA: Incomplete
_CMD_SPI_FLASH_END: Incomplete
_FLASH_ID: Incomplete
_FLASH_REG_BASE: Incomplete
_FLASH_BLOCK_SIZE: Incomplete
_FLASH_SECTOR_SIZE: Incomplete
_FLASH_PAGE_SIZE: Incomplete
_ESP_ERRORS: Incomplete

class ESPFlash:
    uart: Incomplete
    reset_pin: Incomplete
    gpio0_pin: Incomplete
    log: Incomplete
    baudrate: int
    md5sum: Incomplete
    def __init__(self, reset, gpio0, uart, log_enabled: bool = ...) -> None: ...
    def _log(self, data, out: bool = ...) -> None: ...
    def _uart_drain(self) -> None: ...
    def _read_reg(self, addr): ...
    def _write_reg(self, addr, data, mask: int = ..., delay: int = ...) -> None: ...
    def _poll_reg(self, addr, flag, retry: int = ..., delay: float = ...) -> None: ...
    def _write_slip(self, pkt) -> None: ...
    def _read_slip(self): ...
    def _strerror(self, err): ...
    def _checksum(self, data): ...
    def _command(self, cmd, payload: bytes = ..., checksum: int = ...): ...
    def set_baudrate(self, baudrate, timeout: int = ...) -> None: ...
    def bootloader(self, retry: int = ...): ...
    def flash_read_size(self): ...
    def flash_attach(self) -> None: ...
    def flash_config(self, flash_size=...) -> None: ...
    def flash_write_file(self, path, blksize: int = ...) -> None: ...
    def flash_verify_file(self, path, digest: Incomplete | None = ..., offset: int = ...) -> None: ...
    def reboot(self) -> None: ...
