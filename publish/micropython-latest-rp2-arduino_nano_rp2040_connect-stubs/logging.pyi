from _typeshed import Incomplete

CRITICAL: int
ERROR: int
WARNING: int
INFO: int
DEBUG: int
NOTSET: int
_level_dict: Incomplete
_stream: Incomplete

class LogRecord:
    __dict__: Incomplete
    def __init__(self) -> None: ...
    def __getattr__(self, key): ...

class Handler:
    def __init__(self) -> None: ...
    def setFormatter(self, fmtr) -> None: ...

class Logger:
    level: Incomplete
    handlers: Incomplete
    record: Incomplete
    name: Incomplete
    def __init__(self, name) -> None: ...
    def _level_str(self, level): ...
    def setLevel(self, level) -> None: ...
    def isEnabledFor(self, level): ...
    def log(self, level, msg, *args) -> None: ...
    def debug(self, msg, *args) -> None: ...
    def info(self, msg, *args) -> None: ...
    def warning(self, msg, *args) -> None: ...
    def error(self, msg, *args) -> None: ...
    def critical(self, msg, *args) -> None: ...
    def exc(self, e, msg, *args) -> None: ...
    def exception(self, msg, *args) -> None: ...
    def addHandler(self, hndlr) -> None: ...

_level = INFO
_loggers: Incomplete

def getLogger(name: str = ...): ...
def info(msg, *args) -> None: ...
def debug(msg, *args) -> None: ...
def basicConfig(level=..., filename: Incomplete | None = ..., stream: Incomplete | None = ..., format: Incomplete | None = ...) -> None: ...
